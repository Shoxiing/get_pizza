import asyncio
import os
import io
from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, Voice
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
from pydub import AudioSegment
import torch
from transformers import WhisperForConditionalGeneration, WhisperProcessor, pipeline
from chain_setup import create_prompt, create_chain
from prepare_rag import llm, retriever
from aiogram.filters import Command

load_dotenv() 


# –¢–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∏ huggingface
BOT_TOKEN = os.getenv("TELEGRAM_BOT_API_KEY")
HF_TOKEN = os.getenv("HUGGINGFACEHUB_API_TOKEN")



router: Router = Router()

torch_dtype = torch.bfloat16 


device = 'cpu'
if torch.cuda.is_available():
    device = 'cuda'
elif torch.backends.mps.is_available():
    device = 'mps'
    setattr(torch.distributed, "is_initialized", lambda : False) 
device = torch.device(device)

print(device)# –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ª–æ–≥

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ speech recognition
processor = WhisperProcessor.from_pretrained("antony66/whisper-large-v3-russian")
whisper = WhisperForConditionalGeneration.from_pretrained(
        "antony66/whisper-large-v3-russian", torch_dtype=torch_dtype,
        low_cpu_mem_usage=True, use_safetensors=True)

asr_pipeline = pipeline(
    "automatic-speech-recognition",
    model=whisper,
    tokenizer=processor.tokenizer,
    feature_extractor=processor.feature_extractor,
    max_new_tokens=256,
    chunk_length_s=30,
    batch_size=16,
    return_timestamps=True,
    torch_dtype=torch_dtype,
    device=device)

#–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@router.message(Command("start"))
async def send_welcome(message: Message):
    welcome_message = """–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø AI-–±–æ—Ç –ø–æ –∑–∞–∫–∞–∑—É –ø–∏—Ü—Ü—ã üçï.
    –°–æ–±–∏—Ä–∞—é –∫–æ—Ä–∑–∏–Ω—É –∫–∞–∫ –ø–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é. –ß—Ç–æ –±—ã –í—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–∫–∞–∑–∞—Ç—å ?"""
    await message.reply(welcome_message)


#–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ wav
async def save_voice_as_wav(bot: Bot, voice: Voice) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ wav."""

    voice_files_dir = "/tg_bot/voice_files"
    os.makedirs(voice_files_dir, exist_ok=True)

    voice_file_info = await bot.get_file(voice.file_id)
    voice_ogg = io.BytesIO()
    await bot.download_file(voice_file_info.file_path, voice_ogg)
    
    voice_wav_path = f"/tg_bot/voice_files/voice-{voice.file_unique_id}.wav"
    AudioSegment.from_file(voice_ogg, format="ogg").export(
        voice_wav_path, format="wav")

    return voice_wav_path

#–§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ llm –º–æ–¥–µ–ª—å, –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def get_answer(transcription):

    prompt = create_prompt()
    chain = create_chain(retriever, prompt, llm)
    answer = chain.invoke(transcription)

    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤ –Ω–∞—á–∞–ª–µ "-" –∏ Assistant
    answer_fm = "\n".join(line for line in answer.splitlines() if not set(line) == {"-"})
    answer_fm = answer_fm.replace("Assistant: ", "", 1).strip()

    return answer_fm




# –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü—Ü–∏—é
async def handle_voice_message(bot: Bot, message: Message):
    voice_path = await save_voice_as_wav(bot, message.voice)
    asr = asr_pipeline(
        voice_path,
        generate_kwargs={"language": "russian", "max_new_tokens": 256},
        return_timestamps=False
    )
    transcription = asr['text']
    ans = await get_answer(transcription)
    return ans


# –•–µ–Ω–¥–ª–µ—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.content_type == "voice")
async def process_message(message: Message, bot: Bot):
    try:
        await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
        ans = await asyncio.wait_for(handle_voice_message(bot, message), timeout=15)
        await message.answer(ans)

    except asyncio.TimeoutError:
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

async def handle_voice_message(bot: Bot, message: Message):
    voice_path = await save_voice_as_wav(bot, message.voice)
    asr = asr_pipeline(
        voice_path,
        generate_kwargs={"language": "russian", "max_new_tokens": 256},
        return_timestamps=False
    )
    transcription = asr['text']
    ans = await get_answer(transcription)
    return ans




# –•–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@router.message(F.text)
async def process_message(message: Message, bot: Bot):
    try:
        await message.answer(text="–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ ...")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_answer
        ans = await asyncio.wait_for(get_answer(message.text), timeout=15)
        await message.answer(ans)

    except asyncio.TimeoutError:
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    except TelegramBadRequest as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")



async def main():
    bot: Bot = Bot(token=BOT_TOKEN)
    dp: Dispatcher = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())